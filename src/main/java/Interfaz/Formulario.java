/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import adt.AVL;
import adt.ArbolBinarioBusqueda;
import adt.ArbolMViasBusqueda;
import adt.Categoria;
import adt.IArbolBusqueda;
import adt.SubCategoria;
import excepciones.ExcepcionDatoYaExiste;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import adt.Producto;
import excepciones.ExcepcionDatoNoExiste;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Clock;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedList;

/**
 *
 * @author javi24
 */
public class Formulario extends javax.swing.JFrame {
    IArbolBusqueda<Categoria> tienda;
    public Formulario() throws ExcepcionDatoYaExiste {
        initComponents();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(147, 200, 125));

        jButton1.setText("añadir producto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CATEGORIA", "Comida", "Bebida", "Limpieza y hogar", "Cuidado personal y farmacia", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SUB-CATEGORIA", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton2.setText("eliminar producto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Precio", "Fecha de Elaboracion", "Fecha de vencimiento"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CAMBIAR ARBOL", "ARBOL BINARIO", "ARBOL AVL", "ARBOL MVIAS" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Roboto Cn", 0, 36)); // NOI18N
        jLabel1.setText("MINI MARKET JAVIX");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(355, 355, 355))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(44, 44, 44))
        );

        jButton3.setText("Añadir a carrito");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("generar recibo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Precio U", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jLabel2.setText("PRECIO TOTAL :");

        jButton6.setText("Limpiar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("Modificar producto");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton6))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addContainerGap(80, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton5)
                            .addComponent(jButton6))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:      
        String nombreDelaCategoria = (String)jComboBox1.getSelectedItem();
        String arbol = (String)jComboBox3.getSelectedItem();
        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();  
        
        Categoria categoriaEncontrada = tienda.buscar(new Categoria(nombreDelaCategoria,arbol));
        List<SubCategoria> listaDeSubcategorias = categoriaEncontrada.getSubCategoria().recorridoEnInOrden();
        for (SubCategoria ElementoListaDeSubcategoria : listaDeSubcategorias) {                    
                    modelo.addElement(ElementoListaDeSubcategoria.getNombre());
                }  
        jComboBox2.setModel(modelo);
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NuevoProducto ventanaDenuevoProducto = new NuevoProducto();
        ventanaDenuevoProducto.setVisible(true);
        
        
        // esto me ayuda a esperar a que mi objeto sea creado
        ventanaDenuevoProducto.setOnProductoCreado(() -> {
            List<Producto> listaDeProductos = new LinkedList<>();
            Producto nuevoProducto = ventanaDenuevoProducto.getNuevoProducto();
            String categoriaNombre = (String) jComboBox1.getSelectedItem();
            String subCategoriaNombre = (String) jComboBox2.getSelectedItem();
            String tipoArbol = (String) jComboBox3.getSelectedItem();

            //tengo que posicionarme en el arbol de productos (BUSCAMOS)
            Categoria categoriaEncontrada = tienda.buscar(new Categoria(categoriaNombre, tipoArbol));
            SubCategoria subCategoriaEncontrada = categoriaEncontrada.getSubCategoria().
                    buscar(new SubCategoria(subCategoriaNombre, tipoArbol));
            //HACEMOS UN RECORRIDO INORDEN PARA SACAR EL ULTIMO DATO
            listaDeProductos = subCategoriaEncontrada.getProductos().recorridoEnInOrden();
            String codigoAnterior = listaDeProductos.getLast().getCodigo();
            String letra = codigoAnterior.substring(0, 1);          // "H"
            String numeroStr = codigoAnterior.substring(1);
            // Convertir a número e incrementar
            int numero = Integer.parseInt(numeroStr);
            numero++;                                       // Incrementa en 1

            // Mantener la misma cantidad de dígitos que tenía originalmente
            int longitudOriginal = numeroStr.length();

            String nuevoNumeroStr = String.format("%0" + longitudOriginal + "d", numero);
            nuevoProducto.setCodigo(letra + nuevoNumeroStr);
            try {
                subCategoriaEncontrada.getProductos().insertar(nuevoProducto);
                mostrarProductos(categoriaNombre, subCategoriaNombre);

            } catch (ExcepcionDatoYaExiste ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }

        });
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        String categoriaNombre = (String)jComboBox1.getSelectedItem();
        String subCategoriaNombre = (String)jComboBox2.getSelectedItem();
        String tipoArbol = (String)jComboBox3.getSelectedItem();
        
        String codigo = (String)jTable2.getValueAt(jTable2.getSelectedRow(), 0);
        // borrado del arbol
        Categoria categoriaE = tienda.buscar(new Categoria(categoriaNombre,tipoArbol));
        SubCategoria subCateriaEn = categoriaE.getSubCategoria().buscar(new SubCategoria(subCategoriaNombre,tipoArbol));
        Producto produtoEn = subCateriaEn.getProductos().buscar(new Producto(codigo,"",0f,"",""));
        try {
            subCateriaEn.getProductos().eliminar(produtoEn);
            jComboBox2ActionPerformed(evt); //esto me muestra los productos en la tabla
        } catch (ExcepcionDatoNoExiste ex) {
            Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // EN AQUI SE INICIALIZA EL ARBOL CON EL TIPO DE ARBOL QUE SE ELEGIO
        String tipoArbol = (String)jComboBox3.getSelectedItem();
        
        if(tipoArbol.contains("ARBOL BINARIO")){
            try {
                tienda = new ArbolBinarioBusqueda<>();
                iniciarTienda(tipoArbol);
                System.out.println("se creo con arbol binario de busqueda");
                
            } catch (ExcepcionDatoYaExiste ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(tipoArbol.contains("ARBOL AVL")){
            try {
                tienda = new AVL<>();
                iniciarTienda(tipoArbol);
                System.out.println("se creo con arbol AVL");
                
            } catch (ExcepcionDatoYaExiste ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(tipoArbol.contains("ARBOL MVIAS")){
            try {
                tienda = new ArbolMViasBusqueda<>(4);
                iniciarTienda(tipoArbol);
                System.out.println("se creo con arbol Mvias");
            } catch (ExcepcionDatoYaExiste ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String categoria = (String)jComboBox1.getSelectedItem();
        String subCategoria = (String)jComboBox2.getSelectedItem();
       
        mostrarProductos(categoria, subCategoria);
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        String categoriaNombre = (String)jComboBox1.getSelectedItem();
        String subCategoriaNombre = (String)jComboBox2.getSelectedItem();
        String tipoArbol = (String)jComboBox3.getSelectedItem();
        String codigo = (String)jTable2.getValueAt(jTable2.getSelectedRow(), 0);
        // borrado del arbol
        Categoria categoriaE = tienda.buscar(new Categoria(categoriaNombre,tipoArbol));
        SubCategoria subCateriaEn = categoriaE.getSubCategoria().buscar(new SubCategoria(subCategoriaNombre,tipoArbol));
        Producto produtoEncontrado = subCateriaEn.getProductos().buscar(new Producto(codigo,"",0f,"",""));
        
        if (!existeProducto(produtoEncontrado.getCodigo())) {
            DefaultTableModel modelo = (DefaultTableModel) jTable3.getModel();

            int filaAInsertar = modelo.getRowCount();
            System.out.println(filaAInsertar);
            modelo.setRowCount(filaAInsertar + 1);
            final int VALOR_PREDETERMINADO_CANTIDAD = 1;
            modelo.setValueAt(produtoEncontrado.getCodigo(), filaAInsertar, 0);
            modelo.setValueAt(produtoEncontrado.getNombre(), filaAInsertar, 1);
            modelo.setValueAt(String.valueOf(produtoEncontrado.getPrecio()), filaAInsertar, 2);
            modelo.setValueAt(String.valueOf(VALOR_PREDETERMINADO_CANTIDAD), filaAInsertar, 3);

            jTable3.setModel(modelo);
        }
        else{ // el producto ya existe
            int posicionProducto = 0;
            for (int i = 0; i < jTable3.getRowCount(); i++) {
                String valorAComparar = (String)jTable3.getValueAt(i, 0);
                if(codigo.contains(valorAComparar)){
                    posicionProducto = i;
                    break;
                }
                
            }
            int columnaDeLaTabla3 = jTable3.getColumnCount()-1;
            int valorAnteriorDeLaCantidad = Integer.parseInt(jTable3.getValueAt(posicionProducto, columnaDeLaTabla3).toString());
            jTable3.setValueAt((valorAnteriorDeLaCantidad + 1), posicionProducto, columnaDeLaTabla3);
        }
        
        jLabel2.setText(String.format("PRECIO TOTAL: %.2f", this.totalAPagar()));
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        String contenido = this.tablaAString();

        String nombreArchivo = "recibo.txt";

        double total = totalAPagar();

        try {

            File archivo = new File(nombreArchivo);
            FileWriter fw = new FileWriter(archivo);
            BufferedWriter bw = new BufferedWriter(fw);
            Clock clock = Clock.systemDefaultZone(); // Reloj en UTC
            LocalTime horaActual = LocalTime.now(clock);

            DateTimeFormatter formato = DateTimeFormatter.ofPattern("HH:mm:ss");
            String horaBonita = horaActual.format(formato);

            bw.write("*************** RECIBO ***************\n");
            bw.write("Fecha y hora de emisión: " + java.time.LocalDate.now() + " " + horaBonita + "\n");
            bw.write("---------------------------------------\n");
            bw.write(contenido + "\n");
            bw.write("---------------------------------------\n");
            bw.write(String.format("TOTAL A PAGAR: %.2f\n", total));
            bw.write("****************************************\n");
            bw.write("         ¡Gracias por su compra!            \n");
            bw.write("****************************************\n");

            bw.close();

            JOptionPane.showMessageDialog(this,
                    "Recibo generado exitosamente en: " + nombreArchivo,
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.open(archivo);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "No se pudo abrir el TXT: " + e.getMessage());
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al generar el recibo: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel)jTable3.getModel();
        modelo.setRowCount(0);
        jLabel2.setText("PRECIO TOTAL: ");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Metodo para modificar un Producto
        NuevoProducto ventanaDenuevoProducto = new NuevoProducto();
        ventanaDenuevoProducto.setVisible(true);
        //todo esto necesito para buscar
        String categoriaNombre = (String)jComboBox1.getSelectedItem();
        String subCategoriaNombre = (String)jComboBox2.getSelectedItem();
        String tipoArbol = (String)jComboBox3.getSelectedItem();
        String codigoProducto = (String)jTable2.getValueAt(jTable2.getSelectedRow(), 0);
        
        Categoria categoriaDelProducto = tienda.buscar(new Categoria(categoriaNombre, tipoArbol));
        
        SubCategoria subCategoriaDelProducto = categoriaDelProducto.getSubCategoria()
                                                .buscar(new SubCategoria(subCategoriaNombre, tipoArbol));
        
        Producto productoEncontrado = subCategoriaDelProducto.getProductos().buscar(new Producto(codigoProducto,"",0f,"",""));
        
        ventanaDenuevoProducto.nuevoProducto = productoEncontrado;
        
        //al querer ejecutarse esta parte hace que espere hasta que mi producto se modifique
        ventanaDenuevoProducto.setOnProductoModificado(()->{
        
            jComboBox2ActionPerformed(evt);
        
        });
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Formulario().setVisible(true);
                    
                } catch (ExcepcionDatoYaExiste ex) {
                    Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables


    private void iniciarTienda(String tipoDeArbol) throws ExcepcionDatoYaExiste {
 
        

        // ---------------------------
        // Categorías principales
        // ---------------------------

        Categoria comida = new Categoria("Comida",tipoDeArbol);
        Categoria bebida = new Categoria("Bebida",tipoDeArbol);
        Categoria limpiezaHogar = new Categoria("Limpieza y hogar",tipoDeArbol);
        Categoria cuidadoPersonalFarmacia = new Categoria("Cuidado personal y farmacia",tipoDeArbol);


        tienda.insertar(comida);
        tienda.insertar(bebida);
        tienda.insertar(limpiezaHogar);
        tienda.insertar(cuidadoPersonalFarmacia);


        // -------------------- SUBCATEGORÍAS --------------------
        // comida
        SubCategoria Carnes = new SubCategoria("Carnes",tipoDeArbol);
                // productos
                Producto polloImba = new Producto("C001", "Pollo imba", 16.50f, "30/09/25", "02/10/25");
                Carnes.getProductos().insertar(polloImba);
                Producto chorizoParrillero = new Producto("C002", "Chorizo parrilero", 30.60f, "28/09/25", "05/10/25");
                Carnes.getProductos().insertar(chorizoParrillero);
                Producto fileteCarne = new Producto("C003", "Filete de carne", 40.50f, "30/09/25", "08/10/25");
                Carnes.getProductos().insertar(fileteCarne);
                
                tienda.buscar(comida).getSubCategoria().insertar(Carnes);
                
        SubCategoria FrutasVerduras = new SubCategoria("Frutas y verduras",tipoDeArbol);
                //productos
                Producto manzana = new Producto("F001", "Manzana", 1f, "01/10/25", "07/10/25");
                FrutasVerduras.getProductos().insertar(manzana);
                Producto tomateSol = new Producto("F002", "Tomate sol", 9f, "30/09/25", "05/10/25");
                FrutasVerduras.getProductos().insertar(tomateSol);
                Producto lechuga = new Producto("F003", "Lechuga la pradera", 5.50f, "30/09/25", "08/10/25");
                FrutasVerduras.getProductos().insertar(lechuga);
                
                tienda.buscar(comida).getSubCategoria().insertar(FrutasVerduras);
                
        SubCategoria lacteos = new SubCategoria("Lacteos",tipoDeArbol);
                // productos
                Producto lecheBlancaPil = new Producto("L001", "Leche Blanca Pil", 8.50f, "30/09/25", "06/10/25");
                lacteos.getProductos().insertar(lecheBlancaPil);
                Producto lecheEvaporadaGloria = new Producto("L002", "Leche Evaporada Gloria", 10.50f, "30/09/25", "10/10/25");
                lacteos.getProductos().insertar(lecheEvaporadaGloria);
                Producto yogurtGriego = new Producto("L003", "Yogurt Griego", 15.00f, "01/10/25", "08/10/25");
                lacteos.getProductos().insertar(yogurtGriego);
                Producto quesoMozzarella = new Producto("L004", "Queso Mozzarella", 42.00f, "29/09/25", "12/10/25");
                lacteos.getProductos().insertar(quesoMozzarella);
                Producto mantequillaReina = new Producto("L005", "Mantequilla Reina", 20.00f, "30/09/25", "09/10/25");
                lacteos.getProductos().insertar(mantequillaReina);
                
                tienda.buscar(comida).getSubCategoria().insertar(lacteos);
               
        // bebida
        SubCategoria bebidaAlcoholica = new SubCategoria("Alcoholica",tipoDeArbol);
        //PRODUCTOS
                Producto tequilaReposado = new Producto("B001", "Tequila Reposado", 120.00f, "28/09/25", "28/12/25");
                bebidaAlcoholica.getProductos().insertar(tequilaReposado);
                Producto vinoTintoCampos = new Producto("B002", "Vino Tinto Campos de Solana", 95.00f, "29/09/25", "29/12/25");
                bebidaAlcoholica.getProductos().insertar(vinoTintoCampos);
                Producto singaniTresEstrellas = new Producto("B003", "Singani Tres Estrellas", 70.00f, "30/09/25", "30/12/25");
                bebidaAlcoholica.getProductos().insertar(singaniTresEstrellas);
                Producto cachazaVelho = new Producto("B004", "Cachaza Velho Barreiro", 85.00f, "30/09/25", "30/12/25");
                bebidaAlcoholica.getProductos().insertar(cachazaVelho);
        
                tienda.buscar(bebida).getSubCategoria().insertar(bebidaAlcoholica);
                
        SubCategoria bebidaNoAlcoholica = new SubCategoria("No alcoholica",tipoDeArbol);
                //productos
                Producto jugoAdes = new Producto("B005", "Jugo Ades", 12.00f, "01/10/25", "10/10/25");
                bebidaNoAlcoholica.getProductos().insertar(jugoAdes);
                Producto sodaCocaCola = new Producto("B006", "Soda Coca Cola", 14.00f, "30/09/25", "12/10/25");
                bebidaNoAlcoholica.getProductos().insertar(sodaCocaCola);
                Producto pilfrut = new Producto("B007", "Pilfrut", 10.00f, "01/10/25", "09/10/25");
                bebidaNoAlcoholica.getProductos().insertar(pilfrut);
                Producto simba = new Producto("B008", "Simba", 11.50f, "30/09/25", "08/10/25");
                bebidaNoAlcoholica.getProductos().insertar(simba);
        
                tienda.buscar(bebida).getSubCategoria().insertar(bebidaNoAlcoholica);

        
        //limpieza y hogar
        SubCategoria detergentesSuavizantes = new SubCategoria("Detergentes y suavizantes",tipoDeArbol);
                // productos
                Producto suavizanteCaballero = new Producto("H001", "Suavizante Caballero", 22.00f, "30/09/25", "30/11/25");
                detergentesSuavizantes.getProductos().insertar(suavizanteCaballero);
                Producto detergenteSurf = new Producto("H002", "Detergente Surf", 18.00f, "29/09/25", "29/11/25");
                detergentesSuavizantes.getProductos().insertar(detergenteSurf);
                Producto suavizanteTodoBrillo = new Producto("H003", "Suavizante Todo Brillo", 20.00f, "01/10/25", "01/12/25");
                detergentesSuavizantes.getProductos().insertar(suavizanteTodoBrillo);
        
                tienda.buscar(limpiezaHogar).getSubCategoria().insertar(detergentesSuavizantes);
                
        SubCategoria papeles = new SubCategoria("Papeles",tipoDeArbol);
                //productos
                Producto servilletaPandita = new Producto("H004", "Servilleta Pandita", 9.00f, "30/09/25", "30/11/25");
                papeles.getProductos().insertar(servilletaPandita);
                Producto papelCebolla = new Producto("H005", "Papel Cebolla", 7.50f, "30/09/25", "30/11/25");
                papeles.getProductos().insertar(papelCebolla);
                Producto papelHigienico = new Producto("H006", "Papel Higiénico", 30.00f, "29/09/25", "29/11/25");
                papeles.getProductos().insertar(papelHigienico);
                Producto papelAluminio = new Producto("H007", "Papel Aluminio", 12.00f, "30/09/25", "30/11/25");
                papeles.getProductos().insertar(papelAluminio);
        
                tienda.buscar(limpiezaHogar).getSubCategoria().insertar(papeles);
                
        SubCategoria mascotas = new SubCategoria("Mascotas",tipoDeArbol);
                // productos
                Producto catChow = new Producto("H008", "Cat Chow", 55.00f, "01/10/25", "01/12/25");
                mascotas.getProductos().insertar(catChow);
                Producto shampooPerro = new Producto("H009", "Shampoo para Perro", 25.00f, "30/09/25", "30/11/25");
                mascotas.getProductos().insertar(shampooPerro);
        
                tienda.buscar(limpiezaHogar).getSubCategoria().insertar(mascotas);
        
        //cuidado personal y farmacia
        SubCategoria cosmeticos = new SubCategoria("Cosmeticos", tipoDeArbol);
                //productos
                Producto labialEsika = new Producto("P001", "Labial Esika", 45.00f, "30/09/25", "30/11/25");
                cosmeticos.getProductos().insertar(labialEsika);
                Producto rimeYambal = new Producto("P002", "Rímel Yambal", 60.00f, "29/09/25", "29/11/25");
                cosmeticos.getProductos().insertar(rimeYambal);
                Producto leblonSolar = new Producto("P003", "Protector Solar Leblon", 55.00f, "01/10/25", "01/12/25");
                cosmeticos.getProductos().insertar(leblonSolar);
                Producto desodorantePatito = new Producto("P004", "Desodorante Patito", 18.00f, "30/09/25", "30/11/25");
                cosmeticos.getProductos().insertar(desodorantePatito);
        
                tienda.buscar(cuidadoPersonalFarmacia).getSubCategoria().insertar(cosmeticos);
                
        SubCategoria Analgecicos = new SubCategoria("Analgecicos",tipoDeArbol);
                // productos
                Producto paracetamol = new Producto("P005", "Paracetamol", 12.00f, "30/09/25", "30/12/26");
                Analgecicos.getProductos().insertar(paracetamol);
                Producto ibuprofeno = new Producto("P006", "Ibuprofeno", 15.00f, "30/09/25", "30/12/26");
                Analgecicos.getProductos().insertar(ibuprofeno);
                Producto tapsin = new Producto("P007", "Tapsin", 20.00f, "01/10/25", "01/12/26");
                Analgecicos.getProductos().insertar(tapsin);
        
                tienda.buscar(cuidadoPersonalFarmacia).getSubCategoria().insertar(Analgecicos);
                
        SubCategoria infantes = new SubCategoria("Infantes", tipoDeArbol);
                // productos
                Producto lechePolvoNido = new Producto("P008", "Leche en Polvo Nido", 95.00f, "29/09/25", "29/11/25");
                infantes.getProductos().insertar(lechePolvoNido);
                Producto pañalBaby = new Producto("P009", "Pañal Baby", 45.00f, "01/10/25", "01/12/25");
                infantes.getProductos().insertar(pañalBaby);
                Producto toallaHumedaHuggies = new Producto("P010", "Toalla Húmeda Huggies", 30.00f, "30/09/25", "30/11/25");
                infantes.getProductos().insertar(toallaHumedaHuggies);
                Producto talcoJohnsons = new Producto("P011", "Talco Johnsons", 28.00f, "30/09/25", "30/11/25");
                infantes.getProductos().insertar(talcoJohnsons);
        
                tienda.buscar(cuidadoPersonalFarmacia).getSubCategoria().insertar(infantes);
            

    }

    private void mostrarProductos(String categoriaABuscar, String subCategoriaABuscar) {
        List<Categoria> listaDecategorias = tienda.recorridoEnInOrden();
        List<SubCategoria> listaDeSubCategorias = new ArrayList<>();
        for(Categoria categori: listaDecategorias){
            if(categori.getNombre().contains(categoriaABuscar)){
                listaDeSubCategorias = categori.getSubCategoria().recorridoEnInOrden();
                break;
            }
        }
        
        List<Producto> listaDeProductos = new ArrayList<>();
        
        for(SubCategoria subcateDeLaLista:listaDeSubCategorias){
            if(subcateDeLaLista.getNombre().contains(subCategoriaABuscar)){
                listaDeProductos = subcateDeLaLista.getProductos().recorridoEnInOrden();
            }
        }
        
        final int LONGITUD_DE_LA_LISTA_PRODUCTO = listaDeProductos.size();
        String[] columnas = {"Codigo", "Nombre","precio","fecha de elaboracion","fecha de vencimiento"};
        String[][] datos = new String[LONGITUD_DE_LA_LISTA_PRODUCTO][5];
        
        for (int i = 0; i < LONGITUD_DE_LA_LISTA_PRODUCTO; i++) {
             datos[i][0] = listaDeProductos.get(i).getCodigo();
             datos[i][1] = listaDeProductos.get(i).getNombre();
             datos[i][2] = String.valueOf(listaDeProductos.get(i).getPrecio());
             datos[i][3] = listaDeProductos.get(i).getFechaElaboracion();
             datos[i][4] = listaDeProductos.get(i).getFechaVencimiento();
        }
       
        DefaultTableModel modelo = new DefaultTableModel(datos, columnas);
        jTable2.setModel(modelo);
    }

    private boolean existeProducto(String codigo) {
        int cantidadFilas = jTable3.getRowCount();
        for (int i = 0; i < cantidadFilas; i++) {
            if(codigo.contains((String)jTable3.getValueAt(i, 0)) ){
                return true;
            }
        }    
        return false;
    }
    
    
    public String tablaAString() {
        DefaultTableModel modelo = (DefaultTableModel)jTable3.getModel();
        int filas = modelo.getRowCount();
        int columnas = modelo.getColumnCount();

        StringBuilder sb = new StringBuilder();
        
        
        int[] longitudMayorCadaColumna = new int[3];
        for (int i = 0; i < 3; i++) {
          longitudMayorCadaColumna[i] = longitudMayorColumna(i);
        }
        //encabezado
        for (int i = 0; i < 4; i++) {
            if(i < 3){
                sb.append(rellenarString(jTable3.getColumnName(i),longitudMayorCadaColumna[i]));
                sb.append(" | ");
            }else{
                sb.append(jTable3.getColumnName(i));
            }
        }
        sb.append("\n");
        
        for (int i = 0; i < filas; i++) {            
            for (int j = 0; j < columnas; j++) {
                if(j < 3){
                    sb.append(rellenarString(jTable3.getValueAt(i, j).toString(), 
                            longitudMayorCadaColumna[j]));
                    sb.append(" | ");
                }else{
                    sb.append(jTable3.getValueAt(i, j).toString());
                }
                
            }
            sb.append("\n");
        }
        System.out.println(sb);
        return sb.toString();
    }
    
    
    private String rellenarString(String palabra, int longitudMayorPalabra){
        while(palabra.length() != longitudMayorPalabra){
            palabra += " ";
        }     
        return palabra;
    }
    
    private int longitudMayorColumna(int columna){
        DefaultTableModel modelo = (DefaultTableModel) jTable3.getModel();
        int filas = modelo.getRowCount();
        List<String> nombresProductos = new LinkedList<>();
        nombresProductos.add(modelo.getColumnName(columna));
        for (int i = 0; i < filas; i++) {
            nombresProductos.add(modelo.getValueAt(i, columna).toString());
        }
        int longitutPromerProducto = nombresProductos.get(0).length();
        for (int i = 1; i < nombresProductos.size(); i++) {
            if (nombresProductos.get(i).length() > longitutPromerProducto) {
                longitutPromerProducto = nombresProductos.get(i).length();
            }
        }
        
        return longitutPromerProducto;
    }

    private double totalAPagar() {
        double total = 0;
        int filas = jTable3.getRowCount();
        for (int i = 0; i < filas; i++) {
            total += (Double.parseDouble(jTable3.getValueAt(i, 2).toString())) * (Double.parseDouble(jTable3.getValueAt(i,3).toString()));
        }
        return total;
    }
}
